openapi: 3.0.0
info:
  title: IT-Stone Server
  description: Restfull API server
  version: 0.0.1
servers:
  - url: /api
paths:
  /v0/cards:
    get:
      summary: Receiving all cards
      tags:
        - card
      operationId: getCards
      responses:
        200:
          description: Cards array
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Card'
        default:
          description: Generic Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a new card
      tags:
        - card
      operationId: createCard
      parameters:
        - name: card
          in: body
          schema:
            $ref: "#/components/schemas/Card"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatedEntity"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /v0/cards/{id}:
    parameters:
      - name: id
        in: path
        description: Card ID
        required: true
        schema:
          type: string
    get:
      summary: Receiving one card by ID
      tags:
        - card
      operationId: getCard
      responses:
        200:
          description: Return a card with the specified ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Card"
        404:
          description: The card with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Update one card by ID
      tags:
        - card
      operationId: updateCard
      parameters:
        - name: card
          in: body
          schema:
            $ref: "#/components/schemas/Card"
      responses:
        200:
          description: The card has been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Card"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete one card by ID
      tags:
        - card
      operationId: deleteCard
      responses:
        204:
          description: The card has been deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeletedEntity"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /v0/users:
    get:
      summary: Receiving all users
      tags:
        - user
      operationId: getUsers
      responses:
        200:
          description: Receiving all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        default:
          description: generic Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /v0/users/{id}:
    parameters:
      - name: id
        in: path
        description: User ID
        required: true
        schema:
          type: string
    get:
      operationId: getUser
      tags:
        - user
      summary: Receiving the user by ID
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: The user not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - user
      summary: Delete the user by ID
      operationId: deleteUser
      responses:
        200:
          description: Delete success
        404:
          description: The user not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - user
      summary: Update the user by ID
      operationId: updateUser
      parameters:
        - name: user
          in: body
          schema:
            $ref: '#/components/schemas/User'
      responses:
        200:
          description: Update success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: The user not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    CreatedEntity:
      type: object
      required:
        - id
      properties:
        id:
          type: string
    DeletedEntity:
      type: object
      required:
        - id
      properties:
        id:
          type: string
    Card:
      type: object
      properties:
        id:
          type: string
        class:
          type: string
        name:
          type: string
        surname:
          type: string
        image:
          type: string
        skills:
          type: array
          items:
            type: string
        hp:
          type: number
        damage:
          type: number
        mana_cost:
          type: number
        effects:
          type: object

    User:
      type: object
      properties:
        id:
          type: string
          description: The ID of the User.
        x_token:
          type: string
          description: Auth token
        user_name:
          type: string
          description: The user name.
        first_name:
          type: string
          description: First name of the User.
        last_name:
          type: string
          description: Last name of the User.
        email:
          type: string
          description: The email of the User.
        win_games:
          type: integer
          description: Count of all games where the User has won.
        total_games:
          type: integer
          description: Count of all games of the User.

    Error:
      type: object
      required:
        - message
      properties:
        code:
          type: integer
          format: int64
        message:
          type: string
    UnauthorizedError:
      description: Authentication information is missing or invalid