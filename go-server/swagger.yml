swagger: "2.0"
info:
  description: Description for API Server
  title: IT-Stone Server
  version: 0.0.2
consumes:
  - application/json
produces:
  - application/json
schemes:
  - http
basePath: /api
securityDefinitions:
  APIKeyHeader:
    type: apiKey
    in: header
    name: JWT-Token
security:
  - APIKeyHeader: []
paths:
  /v0/login:
    post:
      parameters:
        - name: LoginForm
          in: body
          schema:
            $ref: "#/definitions/LoginForm"
      operationId: login
      tags:
        - login
      summary: Login by using username and password
      security: []
      responses:
        200:
          description: Login successful.
          schema:
            $ref: "#/definitions/UserToken"
        default:
          description: Internal server error
          schema:
              $ref: "#/definitions/Error"
  /v0/registration:
    post:
      parameters:
        - name: RegistrationForm
          in: body
          schema:
            $ref: "#/definitions/RegistrationForm"
      tags:
        - registration
      operationId: registration
      summary: Registration by using email, username, password
      security: []
      responses:
        200:
          description: Registration successful
        default:
          description: Internal server error
          schema:
            $ref: "#/definitions/Error"

  /v0/cards:
    get:
      summary: Receiving all cards
      tags:
        - card
      operationId: getCards
      responses:
        200:
          description: Cards array
          schema:
            type: array
            items:
              $ref: "#/definitions/Card"
        401:
          $ref: "#/responses/UnauthorizedError"
        default:
          description: Internal server error
          schema:
            $ref: "#/definitions/Error"
    post:
      summary: Create a new card
      tags:
        - card
      operationId: createCard
      parameters:
        - name: card
          in: body
          schema:
            $ref: "#/definitions/Card"
      responses:
        201:
          description: Created
          schema:
            $ref: "#/definitions/CreatedEntity"
        401:
          $ref: "#/responses/UnauthorizedError"
        default:
          description: Internal server error
          schema:
            $ref: "#/definitions/Error"
  /v0/cards/{id}:
    parameters:
      - type: string
        name: id
        in: path
        required: true
    get:
      summary: Receiving one card by ID
      tags:
        - card
      operationId: getCard
      responses:
        200:
          description: Return a card with the specified ID
          schema:
            $ref: "#/definitions/Card"
        404:
          description: The card with the specified ID was not found.
          schema:
            $ref: "#/definitions/Error"
        401:
          $ref: "#/responses/UnauthorizedError"
        default:
          description: Internal server error
          schema:
            $ref: "#/definitions/Error"
    post:
      summary: Update one card by ID
      tags:
        - card
      operationId: updateCard
      parameters:
        - name: card
          in: body
          schema:
            $ref: "#/definitions/Card"
      responses:
        200:
          description: The card has been updated
          schema:
            $ref: "#/definitions/Card"
        404:
          description: The card with the specified ID was not found.
          schema:
            $ref: "#/definitions/Error"
        401:
          $ref: "#/responses/UnauthorizedError"
        default:
          description: Internal server error
          schema:
            $ref: "#/definitions/Error"
    delete:
      summary: Delete one card by ID
      tags:
        - card
      operationId: deleteCard
      responses:
        200:
          description: The card with the specified ID has been deleted.
          schema:
            $ref: "#/definitions/DeletedEntity"
        404:
          description: The card with the specified ID was not found.
          schema:
            $ref: "#/definitions/Error"
        401:
          $ref: "#/responses/UnauthorizedError"
        default:
          description: Internal server error
          schema:
            $ref: "#/definitions/Error"

  /v0/users:
    get:
      summary: Receiving all users
      tags:
        - user
      operationId: getUsers
      responses:
        200:
          description: Receiving all users
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        401:
          $ref: "#/responses/UnauthorizedError"
        default:
          description: Internal server error
          schema:
            $ref: "#/definitions/Error"
  /v0/users/{id}:
    parameters:
      - name: id
        required: true
        type: string
        in: path
    get:
      operationId: getUser
      tags:
        - user
      summary: Receiving the user by ID
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/User"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          description: The user with the specified ID was not found.
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Internal server error
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - user
      summary: Delete the user by ID
      operationId: deleteUser
      responses:
        200:
          description: The user with the specified ID has been deleted
          schema:
            $ref: "#/definitions/DeletedEntity"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          description: The user with the specified ID was not found.
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Internal server error
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - user
      summary: Update the user by ID
      operationId: updateUser
      parameters:
        - name: user
          in: body
          schema:
            $ref: "#/definitions/User"
      responses:
        200:
          description: Update success
          schema:
            $ref: "#/definitions/User"
        404:
          description: The user with the specified ID was not found.
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Internal server error
          schema:
            $ref: "#/definitions/Error"

responses:
  UnauthorizedError:
    description: Authentication information is missing or invalid
    headers:
      WWW_Authenticate:
        type: string

definitions:
  RegistrationForm:
    type: object
    required:
      - email
      - username
      - password
    properties:
      email:
        type: string
        format: email
      username:
        type: string
      password:
        type: string
        format: password
  LoginForm:
    type: object
    required:
      - username
      - password
    properties:
      username:
        type: string
      password:
        type: string
        format: password
  CreatedEntity:
    type: object
    required:
      - id
    properties:
      id:
        type: string
  DeletedEntity:
    type: object
    required:
      - id
    properties:
      id:
        type: string
  Card:
    type: object
    properties:
      id:
        type: string
      class:
        type: string
      name:
        type: string
      surname:
        type: string
      image:
        type: string
      skills:
        type: array
        items:
          type: string
      hp:
        type: number
      damage:
        type: number
      mana_cost:
        type: number
      effects:
        type: object
  User:
    type: object
    properties:
      id:
        type: string
        description: The ID of the User.
      username:
        type: string
        description: The user name.
      email:
        type: string
        format: email
        description: The email of the User.
      password:
        type: string
        format: password
        description: The password of the User.
      win_games:
        type: integer
        description: Count of all games where the User has won.
      total_games:
        type: integer
        description: Count of all games of the User.
  UserToken:
    type: object
    properties:
      user:
        $ref: "#/definitions/User"
      token:
        type: string
  Error:
    type: object
    required:
      - message
    properties:
      code:
        type: integer
        format: int64
      message:
        type: string
  Principal:
    type: string