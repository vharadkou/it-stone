// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Description for API IT-Stone",
    "title": "IT-Stone Server",
    "version": "0.0.2"
  },
  "basePath": "/api",
  "paths": {
    "/v0/cards": {
      "get": {
        "tags": [
          "card"
        ],
        "summary": "Receiving all cards",
        "operationId": "getCards",
        "responses": {
          "200": {
            "description": "Cards array",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Card"
              }
            }
          },
          "default": {
            "description": "generic Error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "card"
        ],
        "summary": "Create a new card",
        "operationId": "createCard",
        "parameters": [
          {
            "name": "card",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Card"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CreatedEntity"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v0/cards/{id}": {
      "get": {
        "tags": [
          "card"
        ],
        "summary": "Receiving one card by ID",
        "operationId": "getCard",
        "responses": {
          "200": {
            "description": "Return a card with the specified ID",
            "schema": {
              "$ref": "#/definitions/Card"
            }
          },
          "404": {
            "description": "The card with the specified ID was not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "generic Error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "card"
        ],
        "summary": "Update one card by ID",
        "operationId": "updateCard",
        "parameters": [
          {
            "name": "card",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Card"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The card has been updated",
            "schema": {
              "$ref": "#/definitions/Card"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "card"
        ],
        "summary": "Delete one card by ID",
        "operationId": "deleteCard",
        "responses": {
          "204": {
            "description": "The card has been deleted"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "Card": {
      "type": "object",
      "properties": {
        "class": {
          "type": "string"
        },
        "damage": {
          "type": "number"
        },
        "effects": {
          "type": "object"
        },
        "hp": {
          "type": "number"
        },
        "id": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "mana_cost": {
          "type": "number"
        },
        "name": {
          "type": "string"
        },
        "skills": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "surname": {
          "type": "string"
        }
      }
    },
    "CreatedEntity": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Description for API IT-Stone",
    "title": "IT-Stone Server",
    "version": "0.0.2"
  },
  "basePath": "/api",
  "paths": {
    "/v0/cards": {
      "get": {
        "tags": [
          "card"
        ],
        "summary": "Receiving all cards",
        "operationId": "getCards",
        "responses": {
          "200": {
            "description": "Cards array",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Card"
              }
            }
          },
          "default": {
            "description": "generic Error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "card"
        ],
        "summary": "Create a new card",
        "operationId": "createCard",
        "parameters": [
          {
            "name": "card",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Card"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CreatedEntity"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v0/cards/{id}": {
      "get": {
        "tags": [
          "card"
        ],
        "summary": "Receiving one card by ID",
        "operationId": "getCard",
        "responses": {
          "200": {
            "description": "Return a card with the specified ID",
            "schema": {
              "$ref": "#/definitions/Card"
            }
          },
          "404": {
            "description": "The card with the specified ID was not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "generic Error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "card"
        ],
        "summary": "Update one card by ID",
        "operationId": "updateCard",
        "parameters": [
          {
            "name": "card",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Card"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The card has been updated",
            "schema": {
              "$ref": "#/definitions/Card"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "card"
        ],
        "summary": "Delete one card by ID",
        "operationId": "deleteCard",
        "responses": {
          "204": {
            "description": "The card has been deleted"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "Card": {
      "type": "object",
      "properties": {
        "class": {
          "type": "string"
        },
        "damage": {
          "type": "number"
        },
        "effects": {
          "type": "object"
        },
        "hp": {
          "type": "number"
        },
        "id": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "mana_cost": {
          "type": "number"
        },
        "name": {
          "type": "string"
        },
        "skills": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "surname": {
          "type": "string"
        }
      }
    },
    "CreatedEntity": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    }
  }
}`))
}
