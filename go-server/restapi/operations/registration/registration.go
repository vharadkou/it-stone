// Code generated by go-swagger; DO NOT EDIT.

package registration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// RegistrationHandlerFunc turns a function with the right signature into a registration handler
type RegistrationHandlerFunc func(RegistrationParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RegistrationHandlerFunc) Handle(params RegistrationParams) middleware.Responder {
	return fn(params)
}

// RegistrationHandler interface for that can handle valid registration params
type RegistrationHandler interface {
	Handle(RegistrationParams) middleware.Responder
}

// NewRegistration creates a new http.Handler for the registration operation
func NewRegistration(ctx *middleware.Context, handler RegistrationHandler) *Registration {
	return &Registration{Context: ctx, Handler: handler}
}

/*Registration swagger:route POST /v0/registration registration registration

Registration by using email, username, password

*/
type Registration struct {
	Context *middleware.Context
	Handler RegistrationHandler
}

func (o *Registration) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRegistrationParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
