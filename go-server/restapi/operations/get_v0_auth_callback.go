// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetV0AuthCallbackHandlerFunc turns a function with the right signature into a get v0 auth callback handler
type GetV0AuthCallbackHandlerFunc func(GetV0AuthCallbackParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetV0AuthCallbackHandlerFunc) Handle(params GetV0AuthCallbackParams) middleware.Responder {
	return fn(params)
}

// GetV0AuthCallbackHandler interface for that can handle valid get v0 auth callback params
type GetV0AuthCallbackHandler interface {
	Handle(GetV0AuthCallbackParams) middleware.Responder
}

// NewGetV0AuthCallback creates a new http.Handler for the get v0 auth callback operation
func NewGetV0AuthCallback(ctx *middleware.Context, handler GetV0AuthCallbackHandler) *GetV0AuthCallback {
	return &GetV0AuthCallback{Context: ctx, Handler: handler}
}

/*GetV0AuthCallback swagger:route GET /v0/auth/callback getV0AuthCallback

Return access_token and user

*/
type GetV0AuthCallback struct {
	Context *middleware.Context
	Handler GetV0AuthCallbackHandler
}

func (o *GetV0AuthCallback) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetV0AuthCallbackParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
