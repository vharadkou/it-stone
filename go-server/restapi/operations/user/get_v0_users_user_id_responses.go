// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "it-stone-server/models"
)

// GetV0UsersUserIDOKCode is the HTTP code returned for type GetV0UsersUserIDOK
const GetV0UsersUserIDOKCode int = 200

/*GetV0UsersUserIDOK Success

swagger:response getV0UsersUserIdOK
*/
type GetV0UsersUserIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.User `json:"body,omitempty"`
}

// NewGetV0UsersUserIDOK creates GetV0UsersUserIDOK with default headers values
func NewGetV0UsersUserIDOK() *GetV0UsersUserIDOK {

	return &GetV0UsersUserIDOK{}
}

// WithPayload adds the payload to the get v0 users user Id o k response
func (o *GetV0UsersUserIDOK) WithPayload(payload *models.User) *GetV0UsersUserIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get v0 users user Id o k response
func (o *GetV0UsersUserIDOK) SetPayload(payload *models.User) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetV0UsersUserIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetV0UsersUserIDNotFoundCode is the HTTP code returned for type GetV0UsersUserIDNotFound
const GetV0UsersUserIDNotFoundCode int = 404

/*GetV0UsersUserIDNotFound The user not found.

swagger:response getV0UsersUserIdNotFound
*/
type GetV0UsersUserIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetV0UsersUserIDNotFound creates GetV0UsersUserIDNotFound with default headers values
func NewGetV0UsersUserIDNotFound() *GetV0UsersUserIDNotFound {

	return &GetV0UsersUserIDNotFound{}
}

// WithPayload adds the payload to the get v0 users user Id not found response
func (o *GetV0UsersUserIDNotFound) WithPayload(payload *models.Error) *GetV0UsersUserIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get v0 users user Id not found response
func (o *GetV0UsersUserIDNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetV0UsersUserIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetV0UsersUserIDDefault Unexpected error.

swagger:response getV0UsersUserIdDefault
*/
type GetV0UsersUserIDDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetV0UsersUserIDDefault creates GetV0UsersUserIDDefault with default headers values
func NewGetV0UsersUserIDDefault(code int) *GetV0UsersUserIDDefault {
	if code <= 0 {
		code = 500
	}

	return &GetV0UsersUserIDDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get v0 users user ID default response
func (o *GetV0UsersUserIDDefault) WithStatusCode(code int) *GetV0UsersUserIDDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get v0 users user ID default response
func (o *GetV0UsersUserIDDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get v0 users user ID default response
func (o *GetV0UsersUserIDDefault) WithPayload(payload *models.Error) *GetV0UsersUserIDDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get v0 users user ID default response
func (o *GetV0UsersUserIDDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetV0UsersUserIDDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
